25c25
< <li>Make sure that you have ports 80 and 8080 open on your host OS
---
> <li><p>Make sure that you have ports 80 and 8080 open on your host OS
29c29
< select “Anywhere IPv4”. Save your settings.</li>
---
> select “Anywhere IPv4”. Save your settings.</p></li>
33,51c33,40
< docker daemon.</p>
< <ul>
< <li><code>sudo yum -y update</code></li>
< <li><code>sudo yum -y install docker</code></li>
< <li><code>sudo service docker start</code></li>
< </ul>
< <blockquote>
< <p>If you want to run docker without sudo (recommended) add your user to
< the docker group by running <code>sudo usermod -aG docker $USER</code>.
< You will then need to log out and log back in.</p>
< </blockquote></li>
< <li><p>You will create two docker images and containers from the same
< underlying image. The image is httpd, a well know web server. Visit this
< web page and review the documentation for the image
< https://hub.docker.com/_/httpd/</p></li>
< <li><p>Create two directories for each dockerfile.</p>
< <ul>
< <li><code>mkdir dev-site test-site</code></li>
< </ul></li>
---
> docker daemon.sudo yum -y updatesudo yum -y install dockersudo service
> docker startIf you want to run docker without sudo (recommended) add
> your user to the docker group by running sudo usermod -aG docker $USER.
> You will then need to log out and log back in.You will create two docker
> images and containers from the same underlying image. The image is
> httpd, a well know web server. Visit this web page and review the
> documentation for the image https://hub.docker.com/_/httpd/Create two
> directories for each dockerfile.mkdir dev-site test-site</p></li>
56,94c45,60
< <li><p>CD into test-site</p>
< <ul>
< <li><code>cd test-site</code></li>
< </ul></li>
< <li><p>Create a file named <code>dockerfile</code> with this content
< <code>dockerfile     FROM httpd:2.4</code> &gt; The
< <strong>FROM</strong> keyword allows us to specify a base image for our
< docker image to be built from..</p></li>
< <li><p>Build your dockerfile into an image</p>
< <ul>
< <li><code>sudo docker build -t test-httpd .</code> &gt; This command
< searches for a file named dockerfile in the current directory, builds it
< and tags (-t) the image as <em>test-httpd</em></li>
< </ul></li>
< <li><p>List your images to verify your image was created.</p>
< <ul>
< <li><code>sudo docker images</code></li>
< </ul></li>
< <li><p>Deploy your image to a container. Use –name to name the container
< and the image name at the end of the command.</p>
< <ul>
< <li><code>sudo docker run -dit --name test-httpd-container -p 80:80 test-httpd</code>
< &gt; The -d tells it to run in background, -it allows the continer to
< connect to your terminal session. &gt; -p is the bort binding, above we
< are binding port 80 of the host OS to port 80 on the container.</li>
< </ul></li>
< <li><p>List your running docker images</p>
< <ul>
< <li><code>sudo docker ps -a</code>
< <ul>
< <li>Notice that port 80 of the host is routed to port 80 of the
< container. The -a is to display all details.</li>
< </ul></li>
< </ul></li>
< <li><p>Visit the website in the browser to make sure it works. You
< should see the default web page!</p>
< <ul>
< <li><code>http://&lt;YOUR_PUBLIC_IP&gt;</code></li>
< </ul></li>
---
> <li><p>CD into test-sitecd test-siteCreate a file named dockerfile with
> this content dockerfile FROM httpd:2.4 &gt; The FROM keyword allows us
> to specify a base image for our docker image to be built from..Build
> your dockerfile into an imagesudo docker build -t test-httpd . &gt; This
> command searches for a file named dockerfile in the current directory,
> builds it and tags (-t) the image as test-httpdList your images to
> verify your image was created.sudo docker imagesDeploy your image to a
> container. Use –name to name the container and the image name at the end
> of the command.sudo docker run -dit –name test-httpd-container -p 80:80
> test-httpd &gt; The -d tells it to run in background, -it allows the
> continer to connect to your terminal session. &gt; -p is the bort
> binding, above we are binding port 80 of the host OS to port 80 on the
> container.List your running docker imagessudo docker ps -aNotice that
> port 80 of the host is routed to port 80 of the container. The -a is to
> display all details.Visit the website in the browser to make sure it
> works. You should see the default web page!http://</p></li>
100,174c66,74
< <li><p>CD into the dev site folder</p>
< <ul>
< <li><code>cd ~/dev-site</code></li>
< </ul></li>
< <li><p>Make a folder for html files named <code>public-html</code> and
< cd into it.</p>
< <ul>
< <li><code>mkdir public-html</code></li>
< <li><code>cd public-html</code></li>
< </ul></li>
< <li><p>Paste the content below into <code>index.html</code>
< <code>html     &lt;html&gt;     &lt;body&gt;         &lt;h1&gt;         This is the Dev Site         &lt;/h1&gt;         &lt;h2&gt;Cohort number &lt;COHORT&gt; &lt;/h2&gt;     &lt;/body&gt;     &lt;/html&gt;</code>
< &gt; We will use <code>sed</code> to replace the
< <code>&lt;COHORT&gt;</code> with your actual cohort number</p></li>
< <li><p>Go back to the root of the dev-site</p>
< <ul>
< <li><code>cd ~/dev-site</code></li>
< </ul></li>
< <li><p>Create a file named <code>dockerfile</code> and paste this
< content. Replace 500 with your cohort number.
< <code>DOCKERFILE     FROM httpd:2.4     COPY ./public-html/ /usr/local/apache2/htdocs/     ENV cohort=500     RUN sed -i "s/&lt;COHORT&gt;/$cohort/g" /usr/local/apache2/htdocs/*     EXPOSE 80     CMD ["httpd-foreground"]</code>
< &gt; The <strong>COPY</strong> keyword will copy the files from the host
< machine in public-html to the container htdocs folder at image build
< time. Httpd will automatically serve files in htdocs folder when it is
< started.</p>
< <blockquote>
< <p>The <strong>ENV</strong> keyword sets an enviornment variable that we
< can access later with $cohort. The <strong>RUN</strong> keyword executes
< a command when building the image, such as sed. Here we are replacing
< <code>&lt;COHORT&gt;</code> with the value of $cohort for each file in
< htdocs. <strong>EXPOSE</strong> opens the port 80 of the container, it
< is not needed here because the base image already exposes that port.</p>
< </blockquote>
< <blockquote>
< <p>The <strong>CMD</strong> keyword should only be used once, it is
< different from RUN because it is not executed while the image is being
< build. Instead, CMD is the command to run when the image is executed as
< a container. This is known as the main process, and when this process is
< done executing the container will stop. To keep your container alive,
< this command should not exit. In this case <code>httpd-foreground</code>
< is the same command the base image executes. Therefore, the entire line
< can be removed since the base image already executes the
< <code>httpd-foreground</code> command.</p>
< </blockquote>
< <blockquote>
< 
< </blockquote></li>
< <li><p>Build your dockerfile into an image</p>
< <ul>
< <li><code>sudo docker build -t dev-httpd .</code></li>
< </ul></li>
< <li><p>List your images to verify your image was created.</p>
< <ul>
< <li><code>sudo docker images</code></li>
< </ul></li>
< <li><p>Deploy your image to a container.</p>
< <ul>
< <li><code>sudo docker run -dit --name dev-httpd-container -p 8080:80 dev-httpd</code></li>
< </ul></li>
< <li><p>List your running docker images</p>
< <ul>
< <li><code>sudo docker ps -a</code>
< <ul>
< <li>Notice that port 8080 of the host OS is being routed to port 80 of
< the dev-httpd container. The httpd service is already configured to
< listen on port 80. Now all requests to port 8080 are forwarded to port
< 80 of the container.</li>
< </ul></li>
< </ul></li>
< <li><p>Visit the website in the browser, this time change the port to
< 8080 and you should see your dev site. You can go back and forth between
< sites simply by adjusting the ports in the browser.</p>
< <ul>
< <li><code>http://&lt;YOUR_PUBLIC_IP&gt;:8080</code></li>
< </ul></li>
---
> <li>CD into the dev site foldercd ~/dev-siteMake a folder for html files
> named public-html and cd into it.mkdir public-htmlcd public-htmlPaste
> the content below into index.html html
> <html>
> <body>
> <h1>
> This is the Dev Site
> </h1>
> <pre><code>     &lt;h2&gt;Cohort number &lt;COHORT&gt; &lt;/h2&gt;     &lt;/body&gt;     &lt;/html&gt; &gt; We will use sed to replace the &lt;COHORT&gt; with your actual cohort numberGo back to the root of the dev-sitecd ~/dev-siteCreate a file named dockerfile and paste this content. Replace 500 with your cohort number. DOCKERFILE     FROM httpd:2.4     COPY ./public-html/ /usr/local/apache2/htdocs/     ENV cohort=500     RUN sed -i &quot;s/&lt;COHORT&gt;/$cohort/g&quot; /usr/local/apache2/htdocs/*     EXPOSE 80     CMD [&quot;httpd-foreground&quot;] &gt; The COPY keyword will copy the files from the host machine in public-html to the container htdocs folder at image build time. Httpd will automatically serve files in htdocs folder when it is started.The ENV keyword sets an enviornment variable that we can access later with $cohort. The RUN keyword executes a command when building the image, such as sed. Here we are replacing &lt;COHORT&gt; with the value of $cohort for each file in htdocs. EXPOSE opens the port 80 of the container, it is not needed here because the base image already exposes that port.The CMD keyword should only be used once, it is different from RUN because it is not executed while the image is being build. Instead, CMD is the command to run when the image is executed as a container. This is known as the main process, and when this process is done executing the container will stop. To keep your container alive, this command should not exit. In this case httpd-foreground is the same command the base image executes. Therefore, the entire line can be removed since the base image already executes the httpd-foreground command.Build your dockerfile into an imagesudo docker build -t dev-httpd .List your images to verify your image was created.sudo docker imagesDeploy your image to a container.sudo docker run -dit –name dev-httpd-container -p 8080:80 dev-httpdList your running docker imagessudo docker ps -aNotice that port 8080 of the host OS is being routed to port 80 of the dev-httpd container. The httpd service is already configured to listen on port 80. Now all requests to port 8080 are forwarded to port 80 of the container.Visit the website in the browser, this time change the port to 8080 and you should see your dev site. You can go back and forth between sites simply by adjusting the ports in the browser.http://:8080</code></pre></li>
195,204c95,100
< long as they will be noticeable in the web browser.</p>
< <ul>
< <li><code>vim ~/dev-site/public-html/index.html</code></li>
< </ul></li>
< <li><p>Visit <code>http://&lt;YOUR_PUBLIC_IP&gt;:8080</code> and take
< note if the changes made in step 1 are visible.</p></li>
< <li><p>Delete the container and re-create it with a volume mount using
< the <code>docker run</code> command and adding
< <code>-v /full/path/on/host:/path/on/container</code>. The docker run
< command will fail if the container name is already taken.</p></li>
---
> long as they will be noticeable in the web browser.vim
> ~/dev-site/public-html/index.htmlVisit http://<YOUR_PUBLIC_IP>:8080 and
> take note if the changes made in step 1 are visible.Delete the container
> and re-create it with a volume mount using the docker run command and
> adding -v /full/path/on/host:/path/on/container. The docker run command
> will fail if the container name is already taken.</p></li>
206,209c102,105
< <div class="sourceCode" id="cb1"><pre
< class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span> docker rm <span class="at">-f</span> dev-httpd-container</span>
< <span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span> docker run <span class="at">-dit</span> <span class="at">-v</span> /home/ec2-user/dev-site/public-html:/usr/local/apache2/htdocs <span class="dt">\</span></span>
< <span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>--name dev-httpd-container <span class="at">-p</span> 8080:80 dev-httpd</span></code></pre></div>
---
> <div class="sourceCode" id="cb2"><pre
> class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span> docker rm <span class="at">-f</span> dev-httpd-container</span>
> <span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span> docker run <span class="at">-dit</span> <span class="at">-v</span> /home/ec2-user/dev-site/public-html:/usr/local/apache2/htdocs <span class="dt">\</span></span>
> <span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>--name dev-httpd-container <span class="at">-p</span> 8080:80 dev-httpd</span></code></pre></div>
211,216c107,109
< <li>Edit the host HTML file again with a noticeable change.
< <ul>
< <li><code>vim ~/dev-site/public-html/index.html</code></li>
< </ul></li>
< <li>Visit <code>http://&lt;YOUR_PUBLIC_IP&gt;:8080</code> and take note
< if the changes made in step 1 and step 4 are visible.</li>
---
> <li><p>Edit the host HTML file again with a noticeable change.vim
> ~/dev-site/public-html/index.htmlVisit http://<YOUR_PUBLIC_IP>:8080 and
> take note if the changes made in step 1 and step 4 are visible.</p></li>
220,240c113,119
< <li>Stop the docker containers.
< <ul>
< <li><code>sudo docker stop dev-httpd-container test-httpd-container</code>
< &gt; To start a stopped container use
< <code>sudo docker start &lt;CONTAINER_NAME&gt;</code></li>
< </ul></li>
< <li>Delete the containers.
< <ul>
< <li><code>sudo docker rm dev-httpd-container test-httpd-container</code>
< &gt; You could have stopped and deleted in one step with -f</li>
< </ul></li>
< <li>Delete the images.
< <ul>
< <li><code>sudo docker rmi dev-httpd test-httpd httpd:2.4</code></li>
< </ul></li>
< <li>Now run these commands to verify you have deleted the images and the
< containers.
< <ul>
< <li><code>sudo docker ps -a</code></li>
< <li><code>sudo docker images</code></li>
< </ul></li>
---
> <li><p>Stop the docker containers.sudo docker stop dev-httpd-container
> test-httpd-container &gt; To start a stopped container use sudo docker
> start Delete the containers.sudo docker rm dev-httpd-container
> test-httpd-container &gt; You could have stopped and deleted in one step
> with -fDelete the images.sudo docker rmi dev-httpd test-httpd
> httpd:2.4Now run these commands to verify you have deleted the images
> and the containers.sudo docker ps -asudo docker images</p></li>
4c4
< <p>hello world</p>
---
> hello world
48c48
< <li><p>Create two directories for each dockerfile.</p>
---
> <li>Create two directories for each dockerfile.
54c54
< <p>Start with the test website.</p>
---
> Start with the test website.
56c56
< <li><p>CD into test-site</p>
---
> <li>CD into test-site
64c64
< <li><p>Build your dockerfile into an image</p>
---
> <li>Build your dockerfile into an image
70c70
< <li><p>List your images to verify your image was created.</p>
---
> <li>List your images to verify your image was created.
82c82
< <li><p>List your running docker images</p>
---
> <li>List your running docker images
97c97
< <p>This website will serve our own HTML files.</p>
---
> This website will serve our own HTML files.
100c100
< <li><p>CD into the dev site folder</p>
---
> <li>CD into the dev site folder
114c114
< <li><p>Go back to the root of the dev-site</p>
---
> <li>Go back to the root of the dev-site
147c147
< <li><p>Build your dockerfile into an image</p>
---
> <li>Build your dockerfile into an image
151c151
< <li><p>List your images to verify your image was created.</p>
---
> <li>List your images to verify your image was created.
155c155
< <li><p>Deploy your image to a container.</p>
---
> <li>Deploy your image to a container.
159c159
< <li><p>List your running docker images</p>
---
> <li>List your running docker images
47c47
< https://hub.docker.com/_/httpd/</p></li>
---
> https://hub.docker.com/_/httpd/</li>
63c63
< docker image to be built from..</p></li>
---
> docker image to be built from..</li>
113c113
< <code>&lt;COHORT&gt;</code> with your actual cohort number</p></li>
---
> <code>&lt;COHORT&gt;</code> with your actual cohort number</li>
200c200
< note if the changes made in step 1 are visible.</p></li>
---
> note if the changes made in step 1 are visible.</li>
204c204
< command will fail if the container name is already taken.</p></li>
---
> command will fail if the container name is already taken.</li>
32c32
< <li><p>Install docker on your amazonlinux2 host OS, then start the
---
> <li>Install docker on your amazonlinux2 host OS, then start the
44c44
< <li><p>You will create two docker images and containers from the same
---
> <li>You will create two docker images and containers from the same
48c48
< <li><p>Create two directories for each dockerfile.</p>
---
> <li>Create two directories for each dockerfile.</p>
56c56
< <li><p>CD into test-site</p>
---
> <li>CD into test-site</p>
60c60
< <li><p>Create a file named <code>dockerfile</code> with this content
---
> <li>Create a file named <code>dockerfile</code> with this content
64c64
< <li><p>Build your dockerfile into an image</p>
---
> <li>Build your dockerfile into an image</p>
70c70
< <li><p>List your images to verify your image was created.</p>
---
> <li>List your images to verify your image was created.</p>
74c74
< <li><p>Deploy your image to a container. Use –name to name the container
---
> <li>Deploy your image to a container. Use –name to name the container
82c82
< <li><p>List your running docker images</p>
---
> <li>List your running docker images</p>
90c90
< <li><p>Visit the website in the browser to make sure it works. You
---
> <li>Visit the website in the browser to make sure it works. You
100c100
< <li><p>CD into the dev site folder</p>
---
> <li>CD into the dev site folder</p>
104c104
< <li><p>Make a folder for html files named <code>public-html</code> and
---
> <li>Make a folder for html files named <code>public-html</code> and
110c110
< <li><p>Paste the content below into <code>index.html</code>
---
> <li>Paste the content below into <code>index.html</code>
114c114
< <li><p>Go back to the root of the dev-site</p>
---
> <li>Go back to the root of the dev-site</p>
118c118
< <li><p>Create a file named <code>dockerfile</code> and paste this
---
> <li>Create a file named <code>dockerfile</code> and paste this
147c147
< <li><p>Build your dockerfile into an image</p>
---
> <li>Build your dockerfile into an image</p>
151c151
< <li><p>List your images to verify your image was created.</p>
---
> <li>List your images to verify your image was created.</p>
155c155
< <li><p>Deploy your image to a container.</p>
---
> <li>Deploy your image to a container.</p>
159c159
< <li><p>List your running docker images</p>
---
> <li>List your running docker images</p>
169c169
< <li><p>Visit the website in the browser, this time change the port to
---
> <li>Visit the website in the browser, this time change the port to
194c194
< <li><p>Edit the host HTML file. You can add any changes you like, as
---
> <li>Edit the host HTML file. You can add any changes you like, as
199c199
< <li><p>Visit <code>http://&lt;YOUR_PUBLIC_IP&gt;:8080</code> and take
---
> <li>Visit <code>http://&lt;YOUR_PUBLIC_IP&gt;:8080</code> and take
201c201
< <li><p>Delete the container and re-create it with a volume mount using
---
> <li>Delete the container and re-create it with a volume mount using
32,34c32
< <li><p>Install docker on your amazonlinux2 host OS, then start the
< docker daemon.</p>
< <ul>
---
> <li><ul>
44,49c42,43
< <li><p>You will create two docker images and containers from the same
< underlying image. The image is httpd, a well know web server. Visit this
< web page and review the documentation for the image
< https://hub.docker.com/_/httpd/</p></li>
< <li><p>Create two directories for each dockerfile.</p>
< <ul>
---
> <li></li>
> <li><ul>
56,57c50
< <li><p>CD into test-site</p>
< <ul>
---
> <li><ul>
60,65c53,54
< <li><p>Create a file named <code>dockerfile</code> with this content
< <code>dockerfile     FROM httpd:2.4</code> &gt; The
< <strong>FROM</strong> keyword allows us to specify a base image for our
< docker image to be built from..</p></li>
< <li><p>Build your dockerfile into an image</p>
< <ul>
---
> <li></li>
> <li><ul>
70,71c59
< <li><p>List your images to verify your image was created.</p>
< <ul>
---
> <li><ul>
74,76c62
< <li><p>Deploy your image to a container. Use –name to name the container
< and the image name at the end of the command.</p>
< <ul>
---
> <li><ul>
82,83c68
< <li><p>List your running docker images</p>
< <ul>
---
> <li><ul>
90,92c75
< <li><p>Visit the website in the browser to make sure it works. You
< should see the default web page!</p>
< <ul>
---
> <li><ul>
100,101c83
< <li><p>CD into the dev site folder</p>
< <ul>
---
> <li><ul>
104,106c86
< <li><p>Make a folder for html files named <code>public-html</code> and
< cd into it.</p>
< <ul>
---
> <li><ul>
110,115c90,91
< <li><p>Paste the content below into <code>index.html</code>
< <code>html     &lt;html&gt;     &lt;body&gt;         &lt;h1&gt;         This is the Dev Site         &lt;/h1&gt;         &lt;h2&gt;Cohort number &lt;COHORT&gt; &lt;/h2&gt;     &lt;/body&gt;     &lt;/html&gt;</code>
< &gt; We will use <code>sed</code> to replace the
< <code>&lt;COHORT&gt;</code> with your actual cohort number</p></li>
< <li><p>Go back to the root of the dev-site</p>
< <ul>
---
> <li></li>
> <li><ul>
118,125c94
< <li><p>Create a file named <code>dockerfile</code> and paste this
< content. Replace 500 with your cohort number.
< <code>DOCKERFILE     FROM httpd:2.4     COPY ./public-html/ /usr/local/apache2/htdocs/     ENV cohort=500     RUN sed -i "s/&lt;COHORT&gt;/$cohort/g" /usr/local/apache2/htdocs/*     EXPOSE 80     CMD ["httpd-foreground"]</code>
< &gt; The <strong>COPY</strong> keyword will copy the files from the host
< machine in public-html to the container htdocs folder at image build
< time. Httpd will automatically serve files in htdocs folder when it is
< started.</p>
< <blockquote>
---
> <li><blockquote>
147,148c116
< <li><p>Build your dockerfile into an image</p>
< <ul>
---
> <li><ul>
151,152c119
< <li><p>List your images to verify your image was created.</p>
< <ul>
---
> <li><ul>
155,156c122
< <li><p>Deploy your image to a container.</p>
< <ul>
---
> <li><ul>
159,160c125
< <li><p>List your running docker images</p>
< <ul>
---
> <li><ul>
169,172c134
< <li><p>Visit the website in the browser, this time change the port to
< 8080 and you should see your dev site. You can go back and forth between
< sites simply by adjusting the ports in the browser.</p>
< <ul>
---
> <li><ul>
194,196c156
< <li><p>Edit the host HTML file. You can add any changes you like, as
< long as they will be noticeable in the web browser.</p>
< <ul>
---
> <li><ul>
199,204c159,160
< <li><p>Visit <code>http://&lt;YOUR_PUBLIC_IP&gt;:8080</code> and take
< note if the changes made in step 1 are visible.</p></li>
< <li><p>Delete the container and re-create it with a volume mount using
< the <code>docker run</code> command and adding
< <code>-v /full/path/on/host:/path/on/container</code>. The docker run
< command will fail if the container name is already taken.</p></li>
---
> <li></li>
> <li></li>
